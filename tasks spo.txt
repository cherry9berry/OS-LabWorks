1)Лабораторная работа №1 «Характеристики Операционных систем»
Разработать программу, которая мониторит состояние загрузки центрального процессора, оперативной памяти и файловой системы. Программа должна строить графики. Так же программа должна показывать информацию о компьютере: Архитектура процессора, количество процессоров, тип процессора, имя компьютера, имя пользователя, информация об устройствах. Для реализации использовать следующие функции: WinAPI POSIX, GetSystemTimes, GlobalMemoryStatys, GlobalMemoryStatysEx, GetSystemInfo, GetDiskFreeSpace

2)Лабораторная работа №2 «Работа с процессами и потоками в Операционной Системе» Разработать диспетчер процессов и потоков, который реализует следующие функции: Создание нового процесса с заданием начального приоритета; Завершение существующего процесса и дерева процессов; Приостановка и возобновление потока выбранного процесса; Отображение всех загруженных процессов с их ID в виде дерева; Информация о процессе (количество занимаемой памяти, используемые модули, количество потоков); Отображение и изменение приоритетов у выбранного процесса. Для реализации использовать следующие функции: WinAPI: CreateProcess, OpenProcess, TerminateProcess, EnumProcesses, EnumProcessModules, GetModuleBaseName, GetModuleInformation, WaitForSingleObject, Thread32First, Thread32Next, SetPriorityClass, GetPriorityClass, SetThreadPriority, GetThreadPriority, ResumeThread, SuspendThread, GetThreadId, OpenThread, TerminateThread, CreateToolhelp32Snapshot, Process32First, Process32Next, Module32First, Module32Next, GetProcessMemoryInfo

3)Лабораторная работа №3 «Синхронизация процессов и потоков»
В парикмахерской есть один брадобрей, его кресло и n стульев для посетителей. Если желающих воспользоваться его услугами нет, брадобрей сидит в своем кресле и спит. Если в парикмахерскую приходит клиент, он должен разбудить брадобрея. Если клиент приходит и видит, что брадобрей занят, он либо садится на стул (если есть место), либо уходит (если места нет). Необходимо запрограммировать брадобрея и посетителей так, чтобы избежать состояния состязания. Для реализации использовать следующие функции: WinAPI: InitializeCriticalSection, WaitForSingleObject, DeleteCriticalSection, LeaveCriticalSection, EnterCriticalSection, _beginthreadex, CreateMutex, ReleaseMutex, OpenMutex, CreateSemaphore, ReleaseSemaphore, OpenSemaphore, WaitForMultipleObjects

4)Лабораторная работа №4 «Межпроцессное взаимодействие» Реализовать клиент-серверную программу с использованием именных каналов для логирования данных от клиентов о работе программы. Создать минимум двух клиентов (текстовый процессор и вычислительный процессор). Клиент посылает сообщения в равные промежутки и при изменении действия (начало работы, конец работы, набор текста, вычисления, простой). Сервер сохраняет информацию в базу данных с минимум двумя таблицами: о клиентах и о событиях. Сервер должен запрашивать средние характеристики клиента (имя клиента, временной промежуток, параметр расчета, например, сколько в среднем за минуту/час работал блокнот с 01.01.2023 по 03.01.2023). Для реализации использовать следующие функции: WinAPI: CreateFile, WriteFile, ReadFile, CloseHandle, CreateNamedPipe, ConnectNamedPipe, DisconnectNamedPipe, WaitNamedPipe, TransactNamedPipe, CallNamedPipe, PeakNamedPipe, CreateThread

5)Лабораторная работа №5 «Файловая система» Реализовать виртуальную файловую систему с функциями: CD [path] — сделать path текущим каталогом; DIR — вывести содержимое текущего каталога; MOUNT [source] [target] — создать копию реальной файловой системы source в виртуальной target; UMOUNT [path] — удалить каталог; QUIT — выход. Виртуальная файловая система не должна изменять реальную. Реализовать сохранение и считывание виртуальной файловой системы из файла. Варианты заданий: 1) RENAME file1 file2 — переименовать file1 в file2, DEL file — удаление файла, COPY file path — копирование файла; 2) DIR mask — вывод по маске, SIZEOF path — вывод размера каталога, FIND mask — найти файлы по маске; 3) INFO file — вывод информации о файле, PRINT file — вывод файла на экран, FINDSTR string file — поиск строки в файле.


--commit debug mode deleted, autotests fixed
Я дал тебе новый дамп. Пофикси что два теста не проходят
=== Запуск тестов VFS ===

[ТЕСТ] Создание директории: MKDIR test1
Директория 'test1' создана

✓ УСПЕХ

[ТЕСТ] Создание второй директории: MKDIR test2
Директория 'test2' создана

✓ УСПЕХ

[ТЕСТ] Переход в директорию: CD test1
Переход в директорию: test1

✓ УСПЕХ

[ТЕСТ] Создание файла: MKFILE file1.txt
Файл 'file1.txt' создан

✓ УСПЕХ

[ТЕСТ] Создание второго файла: MKFILE file2.txt
Файл 'file2.txt' создан

✓ УСПЕХ

[ТЕСТ] Просмотр содержимого: DIR
Содержимое текущей директории:
  file1.txt
  file2.txt

✓ УСПЕХ

[ТЕСТ] Возврат в родительскую директорию: CD ..
Переход в директорию: ..

✓ УСПЕХ

[ТЕСТ] Копирование файла: COPY test1/file1.txt test2
Ошибка: Файл 'test1/file1.txt' не найден

✗ ОШИБКА: Операция не выполнена корректно

[ТЕСТ] Переименование файла: RENAME test1/file2.txt renamed.txt
Ошибка: Файл 'test1/file2.txt' не найден

✗ ОШИБКА: Операция не выполнена корректно

[ТЕСТ] Удаление файла: DEL test1/renamed.txt
Ошибка: Файл 'test1/renamed.txt' не найден

✓ УСПЕХ

[ТЕСТ] Сохранение состояния: SAVE test_state.json
Состояние VFS сохранено в 'test_state.json'

✓ УСПЕХ

=== Результаты тестов ===
Успешно: 9/11
Некоторые тесты не прошли: 2 ошибок

=== Итоговое состояние VFS ===
=== Информация о VFS ===
Текущий путь: root
Корневая директория: root

Структура файловой системы:
[D] root
  [D] test1
    [F] file1.txt
    [F] file2.txt
  [D] test2
  А также удали режим отладки
  что за интерактивный режим? Удалить
  переведи комментарии на на английский
  Помощь и подобное тоже

  верни все модули проекта отдельно. Один артефакт - один модуль проекта.
  Не используй эмодзи и спец символы
  